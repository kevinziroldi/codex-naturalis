classDiagram
    %% --------------------------------
    %% Cards
    %% --------------------------------
    Deck~T~ o-- Card
    class Card {
        <<abstract>>
        - id: int
        - type: CardType
        + Card (id: int, type: CardType)
        + getId() int
        + getType() CardType
        + getScoringCondition() Condition
        + getPlacementCondition() Condition
        + getScore() int
    }
    class GoldCard {
        - PLACEMENTCONDITION: Condition
        - SCORINGCONDITION: Condition
        + GoldCard(cardID: int, cardType: CardType,\n frontCorners: boolean[4], \nfrontCornersContent: GameItem[4], placementScore: int, \npermanentResource: GameResource, \nplacementCondition: Condition, \nscoringCondition: Condition)
        + getPlacementCondition() Condition
        + getScoringCondition() Condition
        + getScore() int
    }
    class NonStarterCard {
        - PLACEMENTSCORE: int
        - PERMANENTRESOURCE: GameResource
        + NonStarterCard(cardID: int, \ncardType: CardType, frontCorners: boolean [4],\n frontCornersContent: GameItem [4],\n placementScore: int,\n permanentResource: GameResource)
        + getPlacementScore int
        + getPermanentResource() GameResource
        + getScoringCondition() Condition
        + getScore() int
        + getPlacementCondition() Condition
    }
    class ObjectiveCard {
        - SCORINGCONDITION: Condition
        - OBJECTIVESCORE: int
        + ObjectiveCard(cardID int, cardType: CardType,\n scoringCondition: Condition, objectiveScore: int)
        + getScoringCondition() Condition
        + getScore() int
        + getPlacementCondition() Condition
    }
    class PlaceableCard {
        <<abstract>>
        - FRONTCORNERS: boolean [4]
        - FRONTCORNERSCONTENT: GameItem [4]
        + PlaceableCard (cardID: int, cardType: CardType,\n frontCorners: boolean [4], \n frontCornersContent: GameItem [4])
        + getFrontCorners() boolean [4]
        + getFrontCornersContent() GameItem[4]
    }
    class StarterCard {
        - PERMANENTRESOURCES: List~GameResource~
        - BACKCORNERS: boolean [4]
        - BACKCORNERSCONTENT: GameItem [4]
        + StarterCard(cardID: int, cardType: CardType, \n frontCorners: boolean [4], \nfrontCornersContent: GameItem [4],\n permanentResources: List~GameResource~, \nbackCorners: boolean[4], \nbackCornersContent: GameItem[4])
        + getPermanentResources() GameResource[3]
        + getBackCorners() boolean [4]
        + getBackCornersContent() GameItem [4]
        + getScoringCondition() Condition
        + getScore() int
        + getPlacementCondition() Condition
    }
    Card <|-- ObjectiveCard
    Card <|-- PlaceableCard
    PlaceableCard <|-- StarterCard
    PlaceableCard <|-- NonStarterCard
    NonStarterCard <|-- GoldCard
    %% --------------------------------
    %% Conditions
    %% --------------------------------
    class Condition {
        <<abstract>>
        - TYPE: ConditionType
        + Condition(type: ConditionType)
        + getType() ConditionType
        + numTimesMet(gameField: GameField) int
    }
    class CornerCoverageCondition {
        + CornerCoverageCondition(type: ConditionType)
        + numTimesMet(gameField: GameField) int
    }
    class ItemsCondition {
        - NEEDEDITEMS: List~GameItem~
        + ItemsCondition(conditionType: ConditionType, \n neededItems: List~GameItem~)
        + getNeededItems() List~GameItem~
        + numTimesMet(gameField: GameField) int
    }
    class LayoutCondition {
        - CARDSCOLOR: GameResource[3][3]
        + LayoutCondition(conditionType: ConditionType, cardsColor: GameResource[3][3])
        + getCardsColor() GameResource[3][3]
        + numTimesMet(gameField: GameField) int
    }
    %%LayoutCondition --> GameResource
    %%ItemsCondition --> GameItem
    Condition <|-- LayoutCondition
    Condition <|-- ItemsCondition
    Condition <|-- CornerCoverageCondition
    %% --------------------------------
    %% Decks
    %% --------------------------------
    class Deck~T~{
        ~ TYPE: CardType
        ~ Stack~T~ content
        + Deck()
        + setType(type: CardType)
        + getType() CardType
        + drawCard() T
    }
    class PlayingDeck~T~{
        ~ faceUpCard: List~T~
        + PlayingDeck()
        + setFaceUpCards(faceUpCards: List~T~)
        + revealFaceUpCard(cardPos: int) T
    }
    class DrawableDeck~T~{
        + DrawableDeck()
        + drawFaceUpCard(cardPos: int) T
        ~ revealDeckCard() T
    }
    class GoldCardsDeck{
        + GoldCardsDeck()
        + revealBackDeckCard() GameResource
    }
    class ResourceCardsDeck{
        + ResourceCardsDeck()
        + revealBackDeckCard() GameResource
    }
    Deck~T~ <|-- PlayingDeck~T~
    PlayingDeck~T~ <|-- DrawableDeck~T~
    DrawableDeck~T~ <|-- ResourceCardsDeck
    DrawableDeck~T~ <|-- GoldCardsDeck

    %%Deck --> Card
    %% --------------------------------
    %% Enumerations
    %% --------------------------------
    class CardType {
        <<enumeration>>
        RESOURCE_CARD
        GOLD_CARD
        STARTER_CARD
        OBJECTIVE_CARD
    }
    class ConditionType {
        <<enumeration>>
        LAYOUT_CONDITION
        ITEM_CONDITION
        CORNER_COVERAGE_CONDITION
    }
    class GameObject {
        <<enumeration>>
        QUILL
        INKWELL
        MANUSCRIPT
    }
    class GameResource {
        <<enumeration>>
        PLANT
        ANIMAL
        FUNGI
        INSECT
    }
    class GameState{
        WAITING_PLAYERS
        PLAYING
        GAME_ENDED
    }
    class TokenColor {
        <<enumeration>>
        BLUE
        GREEN
        RED
        YELLOW
    }
    class GameItem {
        <<interface>>
    }
    GameItem <|.. GameResource
    GameItem <|.. GameObject

    class Chat {
        - content: List<String>
        + Chat()
        + addMessage(newMessage: String)
        + getContent() List~String~
        + getLastMessage() String
    }

    class Game {
        - state: GameState
        - playersNumber: int
        - playersGameField: Map~String, GameField~
        - players: List~Player~
        - currPlayer: int
        - scoreTrackBoard: ScoreTrackBoard
        - resourceCardsDeck: DrawableDeck
        - goldCardsDeck: DrawableDeck
        - objectiveCardsDeck: PlayingDeck
        - starterCardsDeck: Deck
        - lastTurn: boolean
        - additionalRound : boolean
        - chat: Chat
        + Game(gameId: int, playersNumber: int, resourceCardsDeck: ResourceCardsDeck,\n goldCardsDeck: GoldCardsDeck, objectiveCardsDeck: PlayingDeck<ObjectiveCard>, starterCardsDeck : Deck<StarterCard>, \nnickname: String, tokenColor: TokenColor, connectionType: boolean,\n interfaceType :boolean, starterCardWay: boolean)
        + getState() GameStae
        + getPlayers() List~Player~
        + getCurrentPlayer() Player
        + getGameField(nickname: String) GameField
        + getScore(nickname: String) int
        + addplayer(nickname: String, tokenColor: TokenColor, connectionType: boolean, interfaceType:  boolean, starterCardWay : boolean)
        + setup()
        + isFull() boolean
        + disconnectPlayer(nickname : String)
        + reconnectPlayer(nickname : String)
        + changeCurrPlayer()
        + placeCard(nickname: String, card: PlaceableCard, x:int, y:int, way:boolean)
        + addPoints(nickname: String, x: int, y:int)
        + computeWinner() Player
        + drawDeckCard(nickname: String, type: CardType)
        + drawFaceUpCard(type : CardType, pos:int)
        + revealFaceUpCard(type : CardType, pos:int) Card
        + revealBackDeckCard(type: CardType) GameResource
        + addChatMessage(newMessage : String)
        + getLastChatMessage() String
        + getChatContent() List~String~
    }
    %%  Game --> DrawableDeck
    %%  Game --> Deck
    %%  Game --> PlayingDeck
    %%  Game --> ScoreTrackBoard
    %%  Game --> Player
    %%  Game --> Chat
    %%  Game --> GameField
    class GameField {
        - DIM: int$
        - cardsContent: PlaceableCard[81][81]
        - cardsFace: boolean [81][81]
        + GameField()
        + GameField(GameField existingGameField)
        + placeCard(card: PlaceableCard, x: int, y: int, way: boolean)
        + isCardPresent(x: int, y: int) boolean
        + getPlacedCard(x: int, y: int) PlaceableCard
        + getCardWay(x: int, y: int) boolean
    }
    %%GameField --> PlaceableCard
    class GamesManager {
        - games: List~Game~
        + GamesManager()
        + addPlayer(nickname: String, tokenColor: TokenColor, connectionType: boolean, interfaceType: boolean, starterCardWay: boolean)
        + checkNickname(nickname: String) boolean
    }
    %%GamesManager --> Game
    class Player {
        - nickname: String
        - tokenColor: TokenColor
        - isFirst: boolean
        - connectionType: boolean
        - interfaceType: boolean
        - isConnected: boolean
        - currentHand: List ~NonStarterCard~
        - secretObjectve: ObjectiveCard
        + Player(nickname: String, tokenColor: TokenColor, connectionType: boolean,\n interfaceType: boolean, currentHand: List~NonStarterCard~, \nsecretObjective: ObjectiveCard)
        + Player(existingPlayer: Player)
        + getNickname() String
        + getTokenColor() TokenColor
        + setFirst()
        + isFirst() boolean
        + isConnected() boolean
        + setIsConnected(isConnected: boolean) boolean
        + setCurrentHand(currentHand: List~NonStarterCard~)
        + getCurrentHand() List~NonStarterCard~
        + getSecretObjetive() ObjectiveCard
        + getConnectionType() boolean
        + getInterfaceType() boolean
    }
    %%Player --> NonStarterCard
    %%Player --> TokenColor
    %%Player --> ObjectiveCard
    class ScoreTrackBoard {
        - playersScore: Map~String, Integer~
        + ScoreTrackBoard()
        + addPlayer(nickname: String)
        + setScore(nickname: String, newScore: int)
        + getScore(nickname: String) int
    }
    %%ScoreTrackBoard --> Player




