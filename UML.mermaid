classDiagram

%% DA TENERE
    Card <|-- PlaceableCard
    Card <|-- ObjectiveCard
    PlaceableCard <|-- DrawableCard
    DrawableCard <|-- GoldCard
    Deck~T~ o-- Card
    Deck~T~ <|-- PlayingDeck~T~
    PlayingDeck~T~ <|-- DrawableDeck~T~
    DrawableDeck~T~ <|-- ResourceCardsDeck
    DrawableDeck~T~ <|-- GoldCardsDeck
    Condition <|-- LayoutCondition
    Condition <|-- ItemsCondition
    Condition <|-- CornerCoverageCondition
    GameItem <|.. GameResource
    GameItem <|.. GameObject
    Chat o-- Message
    Message <|-- PrivateMessage
    LayoutCondition --> GameResource
    ItemsCondition --> GameItem
    GameField --> PlaceableCard
    %%Player --> PlaceableCard
    Player --> TokenColor
    %%Player --> ObjectiveCard
    ScoreTrackBoard --> Player
    %%GameController --> DrawableDeck
    %%GameController --> Deck
    %%GameController --> PlayingDeck
    %%GameController --> ScoreTrackBoard
    %%GameController --> Player
    %%GameController --> Chat
    %%GameController --> GameField
    GamesManager --> Game
    GameCommand <|-- AddChatPrivateMessageCommand
    GameCommand <|-- AddChatPublicMessageCommand
    GameCommand <|-- AddPlayerCommand
    GameCommand <|-- DisconnectPlayerCommand
    GameCommand <|-- PlaceCardCommand
    GameCommand <|-- ReconnectPlayerCommand
    GameCommand <|-- DrawFaceUpCardCommand
    GameCommand <|-- PlaceStarterCardCommand
    GameCommand <|-- DrawDeckCardCommand

    %% CONTROLLER
    class GameController {
        - gameModel: GameModel
        - timer: timeout
        - playersTimer: Map~String, Timer~
        + GameController(id: int, playersNumber:int , resourceCardsDeck: DrawableDeck~DrawableCard~ ,goldCardsDeck: DrawableDeck~GoldCard~ , objectiveCardsDeck: PlayingDeck~ObjectiveCard~ ,starterCardsDeck: Deck~PlaceableCard~ )
        ~ getId() int
        ~ setState(state: GameState)
        ~ getState() GameState
        + getPlayers() List~Player~
        ~ getPlayersNumber() int
        ~ getWinners() List~String~
        + getCurrPlayer() int
        ~ setHasCurrPlayerPlaced()
        ~ setHasNotCurrPlayerPlaced()
        ~ getHasCurrPlayerPlaced() boolean
        ~ getScoreTrackBoard() ScoreTrackBoard
        ~ getResourceCardsDeck() DrawableDeck~DrawableCard~
        ~ getGoldCardsDeck() DrawableDeck~GoldCard~
        ~ getObjectiveCardsDeck() PlayingDeck~ObjectiveCard~
        ~ getStarterCardsDeck() Deck~PlaceableCard~
        ~ setPenultimateRound()
        ~ setCurrentPlayer(num: int)
        + getCommandResult() CommandResult
        + setAndExecuteCommand(gameCommand: GameCommand)
        + addListener(client: VirtualView)
        + addChatPrivateMessage(content: String, sender: String, receiver: String)
        + addChatPublicMessage(content: String, sender: String )
        + addPlayer(newPlayer: Player)
        + disconnectPlayer(nickname: String)
        + reconnectPlayer(nickname: String)
        + changeGameState()
        + drawDeckCard(nickname: String, type: CardType)
        + drawFaceUpCard(nickname: String, type: CardType, pos: int)
        + placeCard(nickname: String,  pos: int,  x: int, y : int, way: boolean)
        + placeStarterCard(nickname: String, way: boolean)
        + placeStarterCardRandomly(nickname: String)
        ~ hasPlayer(nickname: String) boolean
        ~ hasPlayerWithTokenColor(tokenColor: TokenColor) boolean
        - getPlayerPosByNickname(nickname: String) int
        ~ changeCurrPlayer ()
        - isFull() boolean
        - setup()
        - addPoints(nickname: String, x:int, y:int)
    }

    class GamesManager{
        - myGamesManager: GamesManagerÃ 
        - gameControllers: List~GameController~
        - pendingPlayers:  List~Player~
        - commandResult: CommandResult
        - GamesManager()
        + getGamesManager() GamesManager
        + resetGamesManager()
        ~ getGames() List~GameController~
        + getFreeGamesDetails() Map~Integer, Integer~
        + getGameById(id: int) GameController
        + getCommandResult() CommandResult
        + setAndExecuteCommand(gamesManagerCommand: GamesManagerCommand)
        ~ getPendingPlayer(nickname: String) Player
        + getGameIdWithPlayer(nickname: String) int
        + addPlayerToPending( nickname: String, connectionType: boolean, interfaceType: boolean )
        - checkReconnection(nickname: String) boolean
        - checkNicknameUnique(nickname: String) boolean
        + joinExistingGame( nickname: String, tokenColor: TokenColor, gameId: int)
        + joinNewGame(nickname: String, tokenColor: TokenColor, playersNumber: int)
        - createGame (playersNumber: int) int
        - findFirstFreeId() int
        + displayExistingGames(nickname: String)
        + deleteGame(id: int)
    }

    class GameState{
        <<enumeration>>
        GAME_STARTING
        PLACING_STARTER_CARDS
        PLAYING
        WAITING_RECONNECTION
        NO_PLAYERS_CONNECTED
        GAME_ENDED
    }

    %% GAME_COMMANDS
    class AddChatPrivateMessageCommand{
        - content: String
        - sender: String
        - receiver: String
        + AddChatPrivateMessageCommand(content: String, sender: String, receiver:String)
        + execute(gameController: GameController)
    }
    class AddChatPublicMessageCommand{
        - content: String
        - sender: String
        + AddChatPublicMessageCommand(content: String, sender: String)
        + execute(gameController: GameController)
    }
    class AddPlayerToPendingCommand{
        - nickname: String
        - connectionType: boolean
        - interfaceType: boolean
        + AddPlayerToPendingCommand(nickname: String, connectionType: boolean, interfaceType: boolean )
        + getNickname() string
        + execute(gamesManager: GamesManager)
    }
    class DisconnectPlayerCommand{
        ~ nickname: String
        + DisconnectPlayerCommand (nickname: String)
        + execute(gameController: GameController)
    }
    class DisplayGamesCommand{
        - nickname: String
        + DisplayGamesCommand (nickname: String)
        + getNickname() String
        + execute(gamesManager: GamesManager)
    }
    class DrawDeckCardCommand{
        - nickname: String
        - type: CardType
        + DrawDeckCardCommand (nickname: String, type: CardType)
        + execute(gameController: GameController)
    }
    class DrawFaceUpCardCommand{
        - nickname: String
        - type: CardType
        - pos: int
        + DrawFaceUpCardCommand (nickname: String, type: CardType, pos: int)
        + execute(gameController: GameController)
    }
    class GameCommand{
        <<interface>>
        ~ execute(gameController: GameController)
    }
    class GamesManagerCommand{
        <<interface>>
        ~ getNickname() String
        ~ execute(gamesManager: GamesManager)
    }
    class JoinExistingGameCommand{
        - nickname: String
        - tokenColor: TokenColor
        - gameId: int
        + JoinExistingGameCommand(nickname: String, tokenColor: TokenColor , gameId: int)
        + getNickname() String
        + execute(gamesManager: GamesManager)
    }
    class JoinNewGameCommand{
        - nickname: String
        - tokenColor: TokenColor
        - playersNumber: int
        + JoinNewGameCommand(nickname: String, tokenColor: TokenColor, playersNumber: int)
        + getNickname(): String
        + execute(gamesManager: GamesManager)
    }
    class PlaceCardCommand{
        - nickname: String
        - pos: int
        - x: int
        - y: int
        - way: boolean
        + PlaceCardCommand(nickname: String, pos: int, x: int, y:int,way: boolean)
        + execute(gameController: GameController)
    }
    class PlaceStarterCardCommand{
        - nickname: String
        - way: boolean
        + PlaceStarterCardCommand(nickname: String, way: boolean)
        + execute(gameController: GameController)
    }
    class ChatListener {
        <<interface>>
        ~ receiveChatMessageUpdate(chatMessageUpdate: ChatMessageUpdate)
    }
    class DeckListener {
        <<interface>>
        ~ receiveStarterCardUpdate(starterCardUpdate StarterCardUpdate)
        ~ receivePlacedCardUpdate(placedCardUpdate PlacedCardUpdate)
    }
    class GameFieldListener{
        <<interface>>
        ~ receiveStarterCardUpdate(starterCardUpdate StarterCardUpdate)
        ~ receivePlacedCardUpdate(placedCardUpdate PlacedCardUpdate)
    }
    class GameListener{
        <<interface>>
        ~ receiveGameModelUpdate(gameModelUpdate GameModelUpdate)
        ~ receivePlayerJoinedUpdate(playerJoinedUpdate PlayerJoinedUpdate)
        ~ receiveCommandResultUpdate(commandResultUpdate CommandResultUpdate)
    }
    class PlayerListener {
        <<interface>>
        ~ receiveStallUpdate(stallUpdate StallUpdate)
        ~ receiveConnectionUpdate(connectionUpdate ConnectionUpdate)
        ~ receiveCardHandUpdate(cardHandUpdate CardHandUpdate)
    }
    class ScoreTrackBoardListener {
        <<interface>>
        ~ receiveScoreUpdate(scoreUpdate ScoreUpdate)
    }

    %% -----------------------------
    %% LISTENERS
    %% -----------------------------











    %%-----------------------------------------------------
    %% MODEL
    %%-----------------------------------------------------

    %% --------------------------------
    %% cards
    %% --------------------------------
    class Card {
        <<abstract>>
        - ID: int
        - TYPE: CardType
        + Card (id: int, type: CardType)
        + getId() int
        + getType() CardType
    }
    class DrawableCard {
        - PLACEMENTSCORE: int
        + DrawableCard(cardID: int, cardType: CardType, \nfrontCorners: boolean [4], frontCornersContent: GameItem [4],\nbackCorners: boolean [4], backCornersContent: GameItem [4],\n placementScore: int,\n permanentResources: List~GameResource~)
    }
    class GoldCard {
        - PLACEMENTCONDITION: Condition
        - SCORINGCONDITION: Condition
        + GoldCard(cardID: int, cardType: CardType,\n frontCorners: boolean[4], frontCornersContent: GameItem[4],\n backCorners: boolean[4], backCornersContent: GameItem[4], \nplacementScore: int, permanentResources: List~GameResource~, \nplacementCondition: Condition, scoringCondition: Condition)
    }
    class ObjectiveCard {
        - SCORINGCONDITION: Condition
        - OBJECTIVESCORE: int
        + ObjectiveCard(cardID int,\n scoringCondition: Condition, objectiveScore: int)
        + getScoringCondition() Condition
        + getPoints() int
        + getObjectiveScore(gameField GameField) int
        + numTimesScoringConditionMet(gameField GameField) int
    }
    class PlaceableCard {
        - PERMANENTRESOURCES: List~GameResource~
        - FRONTCORNERS: boolean [4]
        - FRONTCORNERSCONTENT: GameItem [4]
        - BACKCORNERS: boolean [4]
        - BACKCORNERSCONTENT: GameItem [4]
        + PlaceableCard (cardID: int, cardType: CardType,\n frontCorners: boolean [4], \n frontCornersContent: GameItem [4],\n backCorners: boolean [4], \n backCornersContent: GameItem [4],\n permanentResources: List~GameResource~)
        + getFrontCorners() boolean [4]
        + getFrontCornersContent() GameItem[4]
        + getBackCorners() boolean [4]
        + getBackCornersContent() GameItem [4]
        + getPermanentResources() List~GameResource~
        + isPlaceable(gameField: Gamefield, x : int, y: int, \nway : boolean) PlacementResult
        + getPlacementScore(gameField: Gamefield, x : int, y: int) int
        + getPlacementCondition() Condition
        + getScoringCondition() Condition
        + getPoints() int
    }
    %% --------------------------------
    %% chat
    %% --------------------------------
    class Chat {
        - chatMessages: List~ChatMessage~
        - chatListeners: List~ChatListener~
        + Chat()
        + addListener(chatListener: ChatListener)
        + addPublicMessage(content: String, sender: String)
        + addPrivateMessage(content: String, sender: String,receiver: String)
        + getLastMessage(receiver: String) ChatMessage
        + getContent(receiver: String) List~ChatMessage~
    }
    class ChatMessage{
        - CONTENT: String
        - SENDERNICKNAME: String
        - dateTime: Date
        - ISPUBLIC: boolean
        + ChatMessage(content: String, senderNickname: String, isPublic: boolean)
        + getContent() String
        + getSender() String
        + getDateTime() Date
        + getIsPublic() boolean
        + isForReceiver(receiver: String)
        + getReceiver() String
    }
    class PrivateMessage{
        - RECEIVERNICKNAME: String
        + PrivateMessage(content: String, senderNickname: String, isPublic: boolean, receiverNickname: String)
    }

    %% --------------------------------
    %% Conditions
    %% --------------------------------
    class Condition {
        <<interface>>
        + numTimesMet(gameField: GameField) int
    }
    class CornerCoverageCondition {
    }
    class ItemsCondition {
        - NEEDEDITEMS: List~GameItem~
        + ItemsCondition(neededItems: List~GameItem~)
        + getNeededItems() List~GameItem~
    }
    class LayoutCondition {
        - CARDSCOLOR: GameResource[4][3]
        - MAXLAYOUTROWS: int$
        - MAXLAYOUTCOLUMNS: int$
        - myGamefield: GameField
        + LayoutCondition(cardsColor: GameResource[3][3])
        + getRows() int
        + getColumns() int
        + getCardsColor() GameResource[3][3]
    }

    %% --------------------------------
    %% Decks
    %% --------------------------------
    class Deck~T~{
        - TYPE: CardType
        - Stack~T~ content
        + Deck(type : CardType, content : Stack~T~ )
        + Deck(existingDeck : Deck~T~)
        + getContent() Stack~T~
        + drawCard() ~T~
        + shuffle()
    }
    class DrawableDeck~T~{
        + DrawableDeck(type : CardType, content : Stack~T~)
        + DrawableDeck( existingDeck : DrawableDeck~T~)
        + drawFaceUpCard(cardPos: int) ~T~
        + revealTopCard() ~T~
    }
    class PlayingDeck~T~{
        - faceUpCards: List~T~
        + PlayingDeck(type : CardType, content : Stack~T~)
        + PlayingDeck(existingDeck : PlayingDeck~T~)
        + setUpDeck()
        + setFaceUpCards(faceUpCards: List~T~)
        + getFaceUpCards() List~T~
        + addFaceUpCard(faceUpCard: ~T~)
        + removeFaceUpCard(pos: int) ~T~
        + revealFaceUpCard(cardPos: int) ~T~
    }
    %% --------------------------------
    %% Enumerations
    %% --------------------------------
    class CardType {
        <<enumeration>>
        RESOURCE_CARD
        GOLD_CARD
        STARTER_CARD
        OBJECTIVE_CARD
    }
    class CommandResult{
        <<enumeration>>
        SUCCESS
        SET_SERVER_GAME
        CREATE_SERVER_GAME
        WRONG_STATE
        WRONG_SENDER
        WRONG_RECEIVER
        PLAYER_NOT_PRESENT
        PLAYER_ALREADY_CONNECTED
        PLAYER_ALREADY_DISCONNECTED
        WRONG_PLAYER
        WRONG_CARD_TYPE
        CARD_NOT_PRESENT
        NO_COVERED_CORNER
        NOT_LEGIT_CORNER
        MULTIPLE_CORNERS_COVERED
        CARD_ALREADY_PRESENT
        INDEXES_OUT_OF_GAME_FIELD
        PLACING_CONDITION_NOT_MET
        PLAYER_ALREADY_PRESENT
        GAME_FULL
        TOKEN_COLOR_ALREADY_TAKEN
        GAME_NOT_PRESENT
        WRONG_PLAYERS_NUMBER
        NOT_PLACED_YET
        CARD_ALREADY_PLACED
        DISPLAY_GAMES
        - resultMessage: String
        ~ CommandResult(resultMessage: String)
        + getResultMessage() String
    }
    class GameObject {
        <<enumeration>>
        QUILL
        INKWELL
        MANUSCRIPT
    }
    class GameResource {
        <<enumeration>>
        PLANT
        ANIMAL
        FUNGI
        INSECT
    }
    class TokenColor {
        <<enumeration>>
        BLUE
        GREEN
        RED
        YELLOW
    }

    class GameField {
        - cardsContent: PlaceableCard[][]
        - cardsFace: Boolean [][]
        - DIM: int$
        - cardsOrder: int[][]
        - numPlayedCards: int
        - starterCard: PlaceableCard
        - gameFieldListeners List~GameFieldListener~
        + GameField()
        + GameField(existingGameField: GameField)
        + addListener (gameFieldListener: GameFieldListener)
        + getListeners() List~GameFieldListener~
        + getDim() int
        + setStarterCard(nickname: String, starterCard: PlaceableCard)
        + getStarterCard() Placeablecard
        + placeCard(card: PlaceableCard, x: int, y: int, way: boolean) CommandResult
        + isCardPresent(x: int, y: int) boolean
        + getPlacedCard(x: int, y: int) PlaceableCard
        + removePlacedcard(x: int, y: int)
        + getCardWay(x: int, y: int) Boolean
        + getCardsOrder() int[81][81]
        + getNumPlayedCards() int
    }

    class GameItem {
        <<interface>>
    }
    class GameModel{
        - id: int
        - playersNumber: int
        - state: GameState
        - players: List~Player~
        - winners: List~String~
        - currPlayer: int
        - hasCurrPlayerPlaced: boolean
        - scoreTrackBoard: ScoreTrackBoard
        - resourceCardsDeck: DrawableDeck~DrawableCard~
        - goldCardsDeck: DrawableDeck~GoldCard~
        - objectiveCardsDeck: PlayingDeck~ObjectiveCard~
        - starterCardsDeck: Deck~PlaceableCard~
        - penultimarteRound: boolean
        - additionalRound: boolean
        - chat: Chat
        - commandResult: CommandResult
        - gameListeners: List~GameListener~
        - emptyDecks: boolean
        + GameModel(id: int,playersNumber: int,resourceCardsDeck: DrawableDeck~DrawableCard~,goldCardsDeck: DrawableDeck~GoldCard~,objectiveCardsDeck: PlayingDeck~ObjectiveCard~, starterCardsDeck: Deck~PlaceableCard~)
        + getId() int
        + getPlayersNumber() int
        + setState(state: GameState)
        + getState() GameState
        + getPlayers() List~Player~
        + getPlayersNicknames() List~String~
        + getWinners() List~String~
        + setCurrPlayer(currPlayer: int)
        + getCurrPlayer() int
        + getHasCurrPlayerPlaced() boolean
        + setHasCurrPlayerPlaced(hasCurrPlayerPlaced: boolean)
        + getScoreTrackBoard() ScoreTrackBoard
        + getResourceCardsDeck() DrawableDeck~DrawableCard~
        + getGoldCardsDeck() DrawableDeck~GoldCard~
        + getObjectiveCardsDeck() PlayingDeck~ObjectiveCard~
        + getStarterCardsDeck() Deck~PlaceableCard~
        + getPenultimateRound() boolean
        + setPenultimateRount(penultimateRound: boolean)
        + getAdditionalRound() boolean
        + setAdditionalRound(additionalRound boolean)
        + setCommandResult(nickname: String, commandResult: CommandResult)
        + getCommandResult() CommandResult
        + setEmptyDecks(value: boolean)
        + getEmptyDecks() boolean
        - sendFameModelUpdate()
        - sendDeckUpdate()
        + setUpResourceCardsDeck()
        + setUpGoldCardsDeck()
        + setUpObjectiveCardsDeck()
        + drawResourceCard() DrawableCard
        + drawGoldCard() GoldCard
        + drawObjectiveCard() ObjectiveCard
        + drawStarterCard() PlaceableCard
        + drawFaceUpResourceCard(pos: int) DrawableCard
        + drawFaceUpGoldCard(pos: int) GoldCard
        + addFaceUpResourceCard(card: DrawableCard)
        + addFaceUpGoldCard(card: GoldCard)
        + revealFaceUpResourceCard(pos: int) DrawableCard
        + revealFaceUpGoldCard(pos: int) GoldCard
        + addPlayer(newPlayer: Player)
        + addListener(client: VirtualView)
        + addChatPublicMessage(content: String,sender: String)
        + addChatPrivateMessage(content: String,sender: String, receiver: String)
        + getScore(nickname: String) int
        + setScore(nickname: String, newScore: int)
        + incrementScore(nickname: String, deltaScore: int)
        + getNumPlayersConnected() int
        + hasPlayer(nickname: String) boolean
        + hasPlayerWithTokenColor(tokenColor: TokenColor) boolean
        + computeWinner()
        + addPoints(player: Player, x:int,y:int)
    }

    class Player {
        - nickname: String
        - gameField: GameField
        - tokenColor: TokenColor
        - isFirst: boolean
        - connectionType: boolean
        - interfaceType: boolean
        - isConnected: boolean
        - currentHand: List ~DrawableCard~
        - secretObjectve: ObjectiveCard
        - isStalled : boolean
        - playerListeners: List~PlayerListener~
        + Player(nickname: String, connectionType: boolean,\n interfaceType: boolean)
        + addListener(playerListener: PlayerListener)
        + getListeners() List~PlayerListener~
        + getNickname() String
        + getGameField() GameField
        + setStarterCard(starterCard: PlaceableCard)
        + setTokenColor(tokenColor: TokenColor)
        + getTokenColor() TokenColor
        + setFirst()
        + isFirst() boolean
        + getConnectionType() boolean
        + getInterfaceType() boolean
        + getIsStalled() boolean
        + setIsStalled(isStalled : boolean)
        + isConnected() boolean
        + setIsConnected(isConnected: boolean)
        + getCurrentHand() List~DrawableCard~
        + removeCardHand(DrawableCard card)
        + addCardHand(DrawableCard card)
        - sendCardHandUpdate()
        + setSecretObjective(ObjectiveCard secrectObjective)
        + getSecretObjetive() ObjectiveCard
        + getStarterCard() PlaceableCard
        + placeCard(card: PlaceableCard, x: int, y: int, way:boolean ) CommandResult
    }

    class ScoreTrackBoard {
        - playersScore: Map~String, Integer~
        - scoreTrackBoardListeners List~ScoreTrackBoardListener~
        + ScoreTrackBoard()
        + addListener(scoreTrackBoardListener: ScoreTrackBoardListener)
        + addPlayer(nickname: String)
        + getScore(nickname: String) int
        + setScore(nickname: String, newScore: int)
        + incrementScore(nickname: String, deltaScore: int)
    }


%% -----------------------------
%% MODEL_VIEW
%% -----------------------------





%% -----------------------------
%% NETWORK
%% -----------------------------



%% -----------------------------
%% UPDATES
%% -----------------------------









    class DecksBuilder{
        <<abstract>>
        - extractFrontCorners(cardJsonObject : JsonObject) boolean[4]
        - extractFrontCornersContent(cardJsonObject : JsonObject) GameItem[4]
        - extractBackCorners(cardJsonObject : JsonObject) boolean[4]
        - extractBackCornersContent(cardJsonObject : JsonObject) GameItem[4]
        - extractPermanentResources(cardJsonObject : JsonObject) List~GameResource~
        - extractLayoutCondition(conditionObject : JsonObject) GameResource[4][3]
        - extractItemsCondition(conditionObject : JsonObject) List~GameItem~
        + buildStarterCardsDeck() Deck~PlaceableCard~
        + buildObjectiveCardsDeck() PlayingDeck~ObjectiveCard~
        + buildResourceCardsDeck() ResourceCardsDeck
        + buildGoldCardsDeck() GoldCardsDeck
    }