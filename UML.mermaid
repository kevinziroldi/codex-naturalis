classDiagram

%% DA TENERE
    Card <|-- PlaceableCard
    Card <|-- ObjectiveCard
    PlaceableCard <|-- DrawableCard
    DrawableCard <|-- GoldCard
    Deck~T~ o-- Card
    Deck~T~ <|-- PlayingDeck~T~
    PlayingDeck~T~ <|-- DrawableDeck~T~
    DrawableDeck~T~ <|-- ResourceCardsDeck
    DrawableDeck~T~ <|-- GoldCardsDeck
    Condition <|-- LayoutCondition
    Condition <|-- ItemsCondition
    Condition <|-- CornerCoverageCondition
    GameItem <|.. GameResource
    GameItem <|.. GameObject
    Chat o-- Message
    Message <|-- PrivateMessage
    LayoutCondition --> GameResource
    ItemsCondition --> GameItem
    GameField --> PlaceableCard
    %%Player --> PlaceableCard
    Player --> TokenColor
    %%Player --> ObjectiveCard
    ScoreTrackBoard --> Player
    %%Game --> DrawableDeck
    %%Game --> Deck
    %%Game --> PlayingDeck
    %%Game --> ScoreTrackBoard
    %%Game --> Player
    %%Game --> Chat
    %%Game --> GameField
    GamesManager --> Game

    %% --------------------------------
    %% cards
    %% --------------------------------
    class Card {
        <<abstract>>
        - ID: int
        - TYPE: CardType
        + Card (id: int, type: CardType)
        + getId() int
        + getType() CardType
    }
    class PlaceableCard {
        - PERMANENTRESOURCES: List~GameResource~
        - FRONTCORNERS: boolean [4]
        - FRONTCORNERSCONTENT: GameItem [4]
        - BACKCORNERS: boolean [4]
        - BACKCORNERSCONTENT: GameItem [4]
        + PlaceableCard (cardID: int, cardType: CardType,\n frontCorners: boolean [4], \n frontCornersContent: GameItem [4],\n backCorners: boolean [4], \n backCornersContent: GameItem [4],\n permanentResources: List~GameResource~)
        + getFrontCorners() boolean [4]
        + getFrontCornersContent() GameItem[4]
        + getBackCorners() boolean [4]
        + getBackCornersContent() GameItem [4]
        + getPermanentResources() List~GameResource~
        + isPlaceable(gameField: Gamefield, x : int, y: int, \nway : boolean) PlacementResult
        + getPlacementScore(gameField: Gamefield, x : int, y: int) int
    }
    class DrawableCard {
        - PLACEMENTSCORE: int
        + DrawableCard(cardID: int, cardType: CardType, \nfrontCorners: boolean [4], frontCornersContent: GameItem [4],\nbackCorners: boolean [4], backCornersContent: GameItem [4],\n placementScore: int,\n permanentResources: List~GameResource~)
        + getScore() int
    }
    class GoldCard {
        - PLACEMENTCONDITION: Condition
        - SCORINGCONDITION: Condition
        + GoldCard(cardID: int, cardType: CardType,\n frontCorners: boolean[4], frontCornersContent: GameItem[4],\n backCorners: boolean[4], backCornersContent: GameItem[4], \nplacementScore: int, permanentResources: List~GameResource~, \nplacementCondition: Condition, scoringCondition: Condition)
    }
    class ObjectiveCard {
        - SCORINGCONDITION: Condition
        - OBJECTIVESCORE: int
        + ObjectiveCard(cardID int, cardType: CardType,\n scoringCondition: Condition, objectiveScore: int)
        + getObjectiveScore(gameField GameField) int
        + numTimesScoringConditionMet(gameField GameField) int
    }

    %% --------------------------------
    %% chat
    %% --------------------------------
    class Chat {
        - messages: List~Message~
        + Chat()
        + addMessage(content: String, sender: String, isPublic: boolean,\n receiver: String, players: List~String~)
        + getLastMessage(receiver: String) Message
        + getContent(receiver: String) List~Message~
    }
    class Message{
        - CONTENT: String
        - SENDERNICKNAME: String
        - ISPUBLIC: boolean
        + Message(content: String, senderNickname: String, isPublic: boolean)
        + getContent() String
        + getSender() String
        + isPublic() boolean
        + getReceiver() String
    }
    class PrivateMessage{
        - RECEIVERNICKNAME: String
        + PrivateMessage(content: String, senderNickname: String, isPublic: boolean, receiverNickname: String)
    }

    %% --------------------------------
    %% Conditions
    %% --------------------------------
    class Condition {
        <<interface>>
        + numTimesMet(gameField: GameField) int
    }
    class CornerCoverageCondition {
        + CornerCoverageCondition()
    }
    class ItemsCondition {
        - NEEDEDITEMS: List~GameItem~
        + ItemsCondition(neededItems: List~GameItem~)
        + getNeededItems() List~GameItem~
    }
    class LayoutCondition {
        - CARDSCOLOR: GameResource[4][3]
        - MAXLAYOUTROWS: int$
        - MAXLAYOUTCOLUMNS: int$
        + LayoutCondition(cardsColor: GameResource[3][3])
        + getCardsColor() GameResource[3][3]
    }

    %% --------------------------------
    %% Decks
    %% --------------------------------
    class Deck~T~{
        ~ TYPE: CardType
        ~ Stack~T~ content
        + Deck(type : CardType, content : Stack~T~ )
        + Deck(existingDeck : Deck~T~)
        + setType(type: CardType)
        + getType() CardType
        + getContent() Stack~T~
        + setContent(content : ~T~)
        + drawCard() T
        + shuffle()
    }
    class PlayingDeck~T~{
        ~ faceUpCards: List~T~
        + PlayingDeck(type : CardType, content : Stack~T~)
        + PlayingDeck(existingDeck : PlayingDeck~T~)
        + setFaceUpCards(faceUpCards: List~T~)
        + revealFaceUpCard(cardPos: int) ~T~
    }
    class DrawableDeck~T~{
        <<abstract>>
        + DrawableDeck(type : CardType, content : Stack~T~)
        + DrawableDeck( existingDeck : DrawableDeck~T~)
        + drawFaceUpCard(cardPos: int) ~T~
        ~ revealDeckCard() ~T~
    }
    class GoldCardsDeck{
        + GoldCardsDeck(type : CardType, content : Stack~GoldCard~)
        + GoldCardsDeck(existingDeck : GoldCardsDeck)
        + revealBackDeckCard() GameResource
    }
    class ResourceCardsDeck{
        + ResourceCardsDeck(type : CardType, content: Stack~DrawableCard~)
        + ResourceCardsDeck(existingDeck : ResourceCardsDeck)
        + revealBackDeckCard() GameResource
    }

    %% --------------------------------
    %% Enumerations
    %% --------------------------------
    class CardType {
        <<enumeration>>
        RESOURCE_CARD
        GOLD_CARD
        STARTER_CARD
        OBJECTIVE_CARD
    }
    class GameObject {
        <<enumeration>>
        QUILL
        INKWELL
        MANUSCRIPT
    }
    class GameResource {
        <<enumeration>>
        PLANT
        ANIMAL
        FUNGI
        INSECT
    }
    class GameState{
        <<enumeration>>
        WAITING_PLAYERS
        PLAYING
        GAME_ENDED
    }
    class PlacementResult {
        <<enumeration>>
        SUCCESS,
        NO_COVERED_CORNER,
        NOT_LEGIT_CORNER,
        MULTIPLE_CORNERS_COVERED,
        CARD_ALREADY_PRESENT,
        INDEXES_OUT_OF_GAME_FIELD,
        PLACING_CONDITION_NOT_MET
    }
    class TokenColor {
        <<enumeration>>
        BLUE
        GREEN
        RED
        YELLOW
    }
    class GameItem {
        <<interface>>
    }

    class GameField {
        - DIM: int$
        - cardsContent: PlaceableCard[81][81]
        - cardsFace: boolean [81][81]
        - cardsOrder: int[81][81]
        - numPlayedCards: int
        - starterCard: PlaceableCard
        + GameField(starterCard: PlaceableCard)
        + GameField(existingGameField: GameField)
        + getDim() int
        + getStarterCard() Placeablecard
        + placeCard(card: PlaceableCard, x: int, y: int, way: boolean)
        + isCardPresent(x: int, y: int) boolean
        + getPlacedCard(x: int, y: int) PlaceableCard
        + removePlacedcard(x: int, y: int)
        + getCardWay(x: int, y: int) boolean
        + getCardsOrder() int[81][81]
        + getNumPlayedCards() int
    }

    class Player {
        - nickname: String
        - tokenColor: TokenColor
        - isFirst: boolean
        - connectionType: boolean
        - interfaceType: boolean
        - isConnected: boolean
        - currentHand: List ~DrawableCard~
        - secretObjectve: ObjectiveCard
        - isStalled : boolean
        + Player(nickname: String, tokenColor: TokenColor, connectionType: boolean,\n interfaceType: boolean)
        + Player(existingPlayer: Player)
        + getNickname() String
        + getTokenColor() TokenColor
        + setFirst()
        + getIsStalled() boolean
        + setIsStalled(isStalled : boolean)
        + isFirst() boolean
        + isConnected() boolean
        + setIsConnected(isConnected: boolean)
        + getCurrentHand() List~DrawableCard~
        + removeCardHand(DrawableCard card)
        + addCardHand(DrawableCard card)
        + setSecretObjective(ObjectiveCard secrectObjective)
        + getSecretObjetive() ObjectiveCard
        + getConnectionType() boolean
        + getInterfaceType() boolean
    }

    class ScoreTrackBoard {
        - playersScore: Map~String, Integer~
        + ScoreTrackBoard()
        + addPlayer(nickname: String)
        + setScore(nickname: String, newScore: int)
        + getScore(nickname: String) int
        + incrementScore(nickname: String, deltaScore: int)
    }

    %% -----------------------------------------
    %%  CONTROLLER
    %% -----------------------------------------
    class Game {
        - id: int
        - state: GameState
        - playersNumber: int
        - playersGameField: Map~String, GameField~
        - players: List~Player~
        - currPlayer: int
        - scoreTrackBoard: ScoreTrackBoard
        - resourceCardsDeck: ResourceCardsDeck
        - goldCardsDeck: GoldCardsDeck
        - objectiveCardsDeck: PlayingDeck~ObjectiveCard~
        - starterCardsDeck: Deck~PlaceableCard~
        - twentyPointsReached: boolean
        - additionalRound : boolean
        - chat: Chat
        %% constructor and getters
        + Game(id: int, playersNumber: int, resourceCardsDeck: ResourceCardsDeck,\n goldCardsDeck: GoldCardsDeck, objectiveCardsDeck: PlayingDeck~ObjectiveCard~, starterCardsDeck : Deck~PlaceableCard~)
        + getId int
        + getState() GameState
        + hasPlayer(nickname: String) boolean
        %% public methods - called by users
        + addPlayer(newPlayer : Player)
        + placeStarterCard(nickname : String, way: boolean)
        + disconnectPlayer(nickname : String)
        + reconnectPlayer(nickname : String)
        + placeCard(nickname: String, card: DrawableCard, x:int, y:int, way:boolean)
        + drawDeckCard(nickname: String, type: CardType)
        + drawFaceUpCard(nickname: String, type : CardType, pos:int)
        + revealFaceUpCard(type: CardType, pos:int) Card
        + revealBackDeckCard(type: CardType) GameResource
        + addChatMessage(content: String, sender: String, isPublic: boolean, receiver: String)
        + getLastChatMessage(receiver: String) Message
        + getChatContent(receiver: String) List~Message~
        %% private methods - internal methods
        - isFull() boolean
        - setup()
        - getPlayerByNickname(nickname : String) int
        - changeCurrPlayer()
        - addPoints(nickname: String, x: int, y:int)
        - computeWinner() List~Player~
    }

    class GamesManager {
        - games: List~Game~
        - pendingPlayers: List~Player~
        + GamesManager()
        + addPlayer(nickname: String, tokenColor: TokenColor, connectionType: boolean, interfaceType: boolean)
        + checkNicknameUnique(nickname: String) boolean
        + createGame(playersNumber : int) int
        + displayExistingGame()
        + getPendingPlayer(nickname: String)
        + joinExistingNickname(nickname: String, gameId : int)
        + joinNewGame(nickname: String)
    }

    class DecksBuilder{
        <<abstract>>
        - extractFrontCorners(cardJsonObject : JsonObject) boolean[4]
        - extractFrontCornersContent(cardJsonObject : JsonObject) GameItem[4]
        - extractBackCorners(cardJsonObject : JsonObject) boolean[4]
        - extractBackCornersContent(cardJsonObject : JsonObject) GameItem[4]
        - extractPermanentResources(cardJsonObject : JsonObject) List~GameResource~
        - extractLayoutCondition(conditionObject : JsonObject) GameResource[4][3]
        - extractItemsCondition(conditionObject : JsonObject) List~GameItem~
        + buildStarterCardsDeck() Deck~PlaceableCard~
        + buildObjectiveCardsDeck() PlayingDeck~ObjectiveCard~
        + buildResourceCardsDeck() ResourceCardsDeck
        + buildGoldCardsDeck() GoldCardsDeck
    }
